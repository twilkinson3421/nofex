use <h.math.nfex>

fun other_func 1
  out %0
efn other_func

fun add_two 1
  exe other_func 17
  add %0 2
  ret :IAX
efn add_two

sta v 53
exe add_two v
put "The result of adding 2 to "
put v
put " is "
out :FUN

out ""

sta a 10
sta b 20

; this is a comment

put "b is "
put b
put " and a is "
out a

cmp a b
brg b_is_greater
bre both_equal

out "a is greater than b"
bra after

lbl b_is_greater
out "b is greater than a"
bra after

lbl both_equal
out "a and b are equal"

lbl after
out ""

add 5 7
put "Add 5 and 7 is "
out :IAX

mul 6 7
sta mult_result :IAX
put "Multiply 6 by 7 is "
out mult_result

sta u 8
exe #h.math,mod mult_result u
con mult_result " Modulo " _ u _ " is " _ :FUN
out :XC1

out ""

con "Hello, " "World"
con :XC1 "!"
out :XC1

psh "Welcome, "
psh "Nofex"
psh "!"

pop
reg :XC4 :XC1
pop
con :XC1 :XC4
reg :XC4 :XC1
pop
con :XC1 :XC4
out :XC1

psh "Nofex"
uns "Greetings, "
psh "!"

sft
sft
con :XOC :XC1
sft
con :XOC :XC1
out :XC1

psh "Element in stack"
elm 0
out :XC1

out ""

exe #h.math,ceil 4.3
put "Ceiling of 4.3 is "
out :FUN

out ""

inp "Enter a number: "
put "You entered: "
out :XC1

mul :XC1 2
put "Your number multiplied by 2 is "
out :IAX
